from django.http import HttpRequest, HttpResponse
from django.views.decorators.csrf import csrf_exempt
import json

from models.sqlite_mgr import get_services
from models.sqlite_mgr import get_domains
from models.sqlite_mgr import get_baseline_scores
from models.meta_info import MetaInfo
from models.meta_info import Link
from models.meta_info import ComplexEncoder
from models.meta_info import MetaInput
from models.meta_info import MetaBase
from models.scores import Scores
from models.domain_weights import DomainWeights
from models.hwbi_calc import HWBICalc

version = 1.0

@csrf_exempt
def get_hwbi(request):
    """
    HWBI Get hwbi
    """
    print('Inside get_hwbi')

    result = {}

    mi = MetaInfo()
    mi.description = 'The Human Well-Being Index (HWBI) was generated by researchers at the ' \
                     'U.S. Environmental Protection Agency using over one hundred ' \
                     'nationally-available data layers to assess economic, social, and ' \
                     'ecosystem services and calculate human well-being across the entire ' \
                     'U.S. at the regional, state, and county levels for years 2000-2010.'

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    links = []
    link1 = Link('calc')
    links.append(link1.get_dict())
    link2 = Link('locations')
    links.append(link2.get_dict())
    link3 = Link('html')
    links.append(link3.get_dict())
    result['links'] = links

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response

@csrf_exempt
def get_calc(request):
    """
    HWBI Get calc
    """
    print('Inside get_calc')

    result = {}

    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model calculator (calc) " \
                     "uses 22 economic, ecosystem, and social services values to " \
                     "calculate eight 'domains of well-being': Connection to Nature, " \
                     "Cultural Fulfillment, Education, Health, Leisure Time, Living Standards, " \
                     "Safety & Security, and Social Cohesion. These domains of well-being " \
                     "are then weighed based on user-supplied 'relative importance values' " \
                     "and are used to determine the overall HWBI score."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    links = []
    link1 = Link('inputs','calc/inputs')
    links.append(link1.get_dict())
    link2 = Link('outputs', 'calc/outputs')
    links.append(link2.get_dict())
    link3 = Link('run', 'calc/run')
    links.append(link3.get_dict())
    link4 = Link('html', 'calc/hwbi')
    links.append(link4.get_dict())
    result['links'] = links

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response

@csrf_exempt
def get_calc_inputs(request):
    """
    HWBI Get calc inputs
    """
    print('Inside get_calc_inputs')

    result = {}

    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model calculator requires " \
                     "twenty-two economic; ecosystem; and social service values " \
                     "and a 'relative importance value' for each of the eight domains " \
                     "of well-being."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    result['metaInputs'] = get_services()
    links = []
    link1 = Link('inputs', 'calc/inputs')
    links.append(link1.get_dict())
    link2 = Link('outputs', 'calc/outputs')
    links.append(link2.get_dict())
    link3 = Link('run', 'calc/run')
    links.append(link3.get_dict())
    link4 = Link('html', 'calc/hwbi')
    links.append(link4.get_dict())
    result['links'] = links

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response


@csrf_exempt
def get_calc_outputs(request):
    """
    HWBI Get calc outputs
    """
    print('Inside get_calc_outputs')

    result = {}

    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model calculator provides " \
                     "eight 'domain of well-being' scores and an overall HWBI score."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()
    result['metaOutputs'] = get_domains()

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response


@csrf_exempt
def get_calc_run(request):
    """
    HWBI Get calc run
    """

    if request.method == 'GET':
        return HttpResponse(status=404)

    data = json.loads(request.body, encoding='utf-8')
    dct_scores = data['scores']
    dct_scores_lower = dict()
    for k, v in dct_scores.items():
        dct_scores_lower[k.lower()] = v

    services = get_services()
    for svc in services:
        svc.score = dct_scores_lower[svc.name.lower()]

    domain_weights = data['domainWeights']
    dct_domain_weight_lower = dict()
    for k, v in domain_weights.items():
        dct_domain_weight_lower[k.lower()] = v

    domains = get_domains()
    for domain in domains:
        domain.weight = dct_domain_weight_lower[domain.name.lower()]

    inputs = list()
    for svc in services:
        inputs.append(svc.get_input_metadata())

    for domain in domains:
        inputs.append(domain.get_input_metadata())

    calc = HWBICalc()
    hwbi_out = calc.hwbi_run(services, domains)

    result = dict()
    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model calculator (calc) " \
                     "uses 22 economic, ecosystem, and social services values to " \
                     "calculate eight 'domains of well-being': Connection to Nature, " \
                     "Cultural Fulfillment, Education, Health, Leisure Time, Living " \
                     "Standards, Safety & Security, and Social Cohesion. These domains " \
                     "of well-being are then weighed based on user-supplied 'relative " \
                     "importance values' and are used to determine the overall HWBI score."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    result['inputs'] = inputs
    result['outputs'] = hwbi_out.get_dict()

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response


@csrf_exempt
def get_locations(request):
    """
    HWBI Get Location
    """
    print('Inside get_locations')

    result = dict()

    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model locations endpoint " \
                     "uses state and county names to provide values for 22 economic, " \
                     "ecosystem, and social services, 8 domains of well-being, " \
                     "and a total HWBI score for the county."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    links = []
    link1 = Link('inputs', 'locations/inputs')
    links.append(link1.get_dict())
    link2 = Link('outputs', 'locations/outputs')
    links.append(link2.get_dict())
    link3 = Link('run', 'locations/run')
    links.append(link3.get_dict())
    # link4 = Link('html', 'locations/hwbi')
    # links.append(link4.get_dict())
    result['links'] = links

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response


@csrf_exempt
def get_locations_inputs(request):
    """
    HWBI Get Locations inputs
    """
    print('Inside get_locations')

    result = dict()

    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model locations " \
                     "endpoint requires USA state and county names."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    inputs = list()
    meta_state = MetaInput('State', 'United States of America state name', type='text', required=True)
    meta_county = MetaInput('County', 'United States of America county name', type='text', required=True)

    inputs.append(meta_state.get_dict())
    inputs.append(meta_county.get_dict())

    result['metaInputs'] = inputs

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response




@csrf_exempt
def get_locations_outputs(request):
    """
    HWBI Get calc outputs
    """
    print('Inside get_locations_outputs')

    result = {}

    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model locations endpoint " \
                     "uses state and county names to provide values for 22 economic, " \
                     "ecosystem, and social services, 8 domains of well-being, and a " \
                     "total HWBI score for the county."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()
    result['metaOutputs'] = get_domains()

    response = HttpResponse()
    rslt = json.dumps(result, cls=ComplexEncoder)
    print(rslt)

    response.content = rslt
    return response


@csrf_exempt
def get_locations_run(request):
    """
    HWBI Get locations run
    """

    response = HttpResponse()

    data = None
    state = None
    county = None
    if request.method == 'GET':
        return HttpResponse(status=404)

    data = json.loads(request.body,encoding='utf-8')
    state = data['state']
    county = data['county']

    services = list()
    base_line_scores = get_baseline_scores(state, county)
    for base_score in base_line_scores:
        services.append(base_score.get_service_out())

    domains = list()
    db_domains = get_domains()
    for domain in db_domains:
        domains.append(domain.get_domain_out())

    calc = HWBICalc()
    outputs = calc.hwbi_run(services, domains)

    result = dict()
    mi = MetaInfo()
    mi.description = "The Human Well-Being Index (HWBI) model calculator (calc) " \
                     "uses 22 economic, ecosystem, and social services values to " \
                     "calculate eight 'domains of well-being': Connection to Nature, " \
                     "Cultural Fulfillment, Education, Health, Leisure Time, Living " \
                     "Standards, Safety & Security, and Social Cohesion. These domains " \
                     "of well-being are then weighed based on user-supplied 'relative " \
                     "importance values' and are used to determine the overall HWBI score."

    mi.url.href = request.get_full_path()

    result['metaInfo'] = mi.get_dict()

    # build inputs
    inputs = list()
    meta_state = MetaBase('state',value=state, description='US State')
    meta_county = MetaBase('county', value=county, description='County')
    inputs.append(meta_state.get_dict())
    inputs.append(meta_county.get_dict())
    result['inputs'] = inputs

    try:
        result['outputs'] = outputs.get_dict()

        response = HttpResponse()
        rslt = json.dumps(result)
        print(rslt)

        response.content = rslt
    except Exception as e:
        s = str(e)

    return response



